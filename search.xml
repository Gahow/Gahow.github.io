<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于Hexo+Github搭建个人博客</title>
    <url>/2021/10/31/%E5%9F%BA%E4%BA%8EHexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>本文在mac OS11.6环境下进行配置，出现的一些问题在文末进行总结。</p>
<h5 id="安装node.js">安装Node.js</h5>
<p>可通过在terminal中运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node.js</span><br></pre></td></tr></table></figure>
<p>安装Node.js，可通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>查看node版本，确认是否成功安装。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.01.46.png" alt="node版本" /><figcaption aria-hidden="true">node版本</figcaption>
</figure>
<span id="more"></span>
<h5 id="安装git">安装git</h5>
<p>通过安装Xcode Command Line Tools即带有git，可通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>查看git的版本，确认是否成功安装。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.02.07.png" alt="git版本" /><figcaption aria-hidden="true">git版本</figcaption>
</figure>
<h5 id="注册获取github仓库">注册获取GitHub仓库</h5>
<p>注册一个github账号，在Your repositories里新建一个仓库，其中repository name填username.github.io</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.08.01.png" alt="创建GitHub仓库" /><figcaption aria-hidden="true">创建GitHub仓库</figcaption>
</figure>
<h5 id="安装hexo">安装Hexo</h5>
<p>在你要存储你的博客文件的地方开始安装Hexo，可通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>安装Hexo。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.10.47.png" alt="安装Hexo" /><figcaption aria-hidden="true">安装Hexo</figcaption>
</figure>
<p>之后通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>确认Hexo版本从而确认是否成功安装。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.12.37.png" alt="Hexo版本" /><figcaption aria-hidden="true">Hexo版本</figcaption>
</figure>
<h5 id="创建博客文件">创建博客文件</h5>
<p>可通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Blog</span><br></pre></td></tr></table></figure>
<p>在当前位置初始化一个名字为Blog的文件夹。</p>
<p>通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Blog</span><br></pre></td></tr></table></figure>
<p>进入Blog文件夹，接着输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>安装必需的组件。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.16.05.png" alt="安装必需组件" /><figcaption aria-hidden="true">安装必需组件</figcaption>
</figure>
<h5 id="利用hexo初始文件生成本地网页">利用Hexo初始文件生成本地网页</h5>
<p>通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>生成本地网页并部署至本地服务器。<img src="/images/截屏2021-10-31%20下午9.17.38.png" alt="部署本地网页" /></p>
<p>这时通过http://localhost:4000即可进入我们的博客预览。</p>
<figure>
<img src="/images/截屏2021-10-31%20下午9.19.42.png" alt="博客预览" /><figcaption aria-hidden="true">博客预览</figcaption>
</figure>
<p>上图所示即为Hexo提供的初始模版。</p>
<h5 id="将本地网页部署到github上">将本地网页部署到GitHub上</h5>
<p>进入博客文件夹位置（上文的Blog）运行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>之后通过下列命令生成密钥SSH key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>选择文件夹与输入密码和确认密码时都可不填，回车三次即可。</p>
<p>之后通过下列命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>可返回密钥，将该段内容复制。</p>
<p>进入GitHub，头像下方的settings，点击SSH and GPG keys，新建一个SSH，Title可随意，Key中填入上面复制的内容。</p>
<p>回到Terminal输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>出现下图所示内容则代表GitHub成功与Blog文件夹连接。</p>
<p><img src="/images/截屏2021-10-31%20下午9.32.30.png" /></p>
<p>之后通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>
<p>进入_config.yml进行修改，将最后一行deploy补充为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<figure>
<img src="/images/截屏2021-10-31%20下午9.35.28.png" alt="修改_config.yml" /><figcaption aria-hidden="true">修改_config.yml</figcaption>
</figure>
<p>之后保存退出即可。</p>
<p>最后安装一个拓展，通过下列命令实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>最后通过下列命令即可将博客部署到Github网页上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>稍等一会即可通过yourname.github.io访问你的博客啦！</p>
<p>如果部署失败可通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>再次尝试。</p>
<h5 id="模版修改">模版修改</h5>
<p>当然Hexo初始的模版太丑啦，功能也不完全，我们可以到Hexo官网挑选自己喜欢的主题。</p>
<p>之后通过该主题的官方文档即可完成模版的配置。</p>
<p>个人比较喜欢的几个模版：Maupassant、NexT、Purer</p>
<h5 id="博文上传">博文上传</h5>
<p>将你的文章的.md文件放入Blog文件下的source/_posts即可。</p>
<h5 id="问题总结">问题总结</h5>
<p>1.从GitHub获取文件时出现unable to access</p>
<p>可使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://proxyAddress:port</span><br></pre></td></tr></table></figure>
<p>让Terminal使用代理，此命令只对当前Terminal生效，若想获取永久代理，可自行Google。</p>
<p>2.安装hero-renderer-sass失败，网络上的常见解决方案对我无效</p>
<p>目前暂未解决该问题，猜想是默认安装的Node.js版本与默认安装的sass版本不匹配。</p>
<p>3.本地网页预览正确，部署到网页上后显示有问题</p>
<p>通过修改站点配置文件_config,yml中的网页url解决。</p>
]]></content>
      <categories>
        <category>萌新之始</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第四次实验报告</title>
    <url>/2021/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<center>
<h3>
数据结构第四次实验报告
</h3>
</center>
<center>
<h4>
王家豪 20377210
</h4>
</center>
<h5 id="一任务实现的基本思路">一、任务实现的基本思路</h5>
<h5 id="必做题">1.必做题</h5>
<p>​ 首先将输入的列表创建一棵树，通过队列逐个将新建的非空节点压入队列中，逐个从队列获取第一个节点，从列表中获取值为该节点添加左孩子和右孩子。之后定义递归函数解决问题，传入两个节点，判断第一个节点的左孩子与第二个节点的右孩子是否相等，通过递归即可判断整棵树是否对称。</p>
<h5 id="选做题">2.选做题</h5>
<p>​ 同第一题将输入的数据创建一棵树，之后利用贪心算法，通过递归函数实现计算。当一个节点为空或者一个节点的两个根节点都为空时，返回上一级，如果有一个孩子节点非空且孩子节点的值不为inf，则在该节点设置一个监控，并记该节点的父节点也为被监控，为ans的值加1，返回上一级。如此递归即可实现计算。</p>
<span id="more"></span>
<h5 id="二相关数据结构回顾">二、相关数据结构回顾</h5>
<p>​ 二叉树是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。</p>
<p>​ 二叉树的第<span class="math inline">\({\displaystyle i}\)</span>层至多拥有<span class="math inline">\({\displaystyle 2^{i-1}}\)</span>个节点；深度为<span class="math inline">\({\displaystyle k}\)</span>的二叉树至多总共有<span class="math inline">\({\displaystyle 2^{\begin{aligned}k+1\end{aligned}}-1}\)</span>个节点（定义根节点所在深度 <span class="math inline">\({\displaystyle k_{0}=0}\)</span>，而总计拥有节点数符合的，称为“满二叉树”；深度为<span class="math inline">\({\displaystyle k}\)</span>有<span class="math inline">\({\displaystyle n}\)</span>个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度<span class="math inline">\({\displaystyle k}\)</span>的满二叉树，序号为1到<span class="math inline">\({\displaystyle n}\)</span>的节点一对一对应时，称为完全二叉树。</p>
<h5 id="三解决问题中的问题与反思">三、解决问题中的问题与反思</h5>
<p>​ 在第一次通过输入元素创建树时，以为第<span class="math inline">\(k\)</span>个节点的左节点和右节点可通过列表的第<span class="math inline">\(2k\)</span>和<span class="math inline">\(2k+1\)</span>个元素来生成。但之后发现了问题，如果一个节点已经为空，之后的列表中就不再输入该空节点的左右节点。所以之后选择该用一个队列在逐个获取节点，为其添加左右节点，再将新建的节点压入队列中。即可避免创建树失败的问题。</p>
<h5 id="四代码及运行结果截图">四、代码及运行结果截图</h5>
<p>第一题代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, var</span>):</span></span><br><span class="line">        self.var = var</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_tree</span>(<span class="params">lis, root</span>):</span></span><br><span class="line">    stack = [root]</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; <span class="built_in">len</span>(lis):</span><br><span class="line">        p = stack.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> lis[k] != <span class="string">&#x27;null&#x27;</span>:</span><br><span class="line">            p.left = Node(lis[k])</span><br><span class="line">            stack.append(p.left)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> lis[k] != <span class="string">&#x27;null&#x27;</span>:</span><br><span class="line">            p.right = Node(lis[k])</span><br><span class="line">            stack.append(p.right)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def pre_order(node):</span></span><br><span class="line"><span class="string">    if node is None:</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    print(node.var, end=&#x27; &#x27;)</span></span><br><span class="line"><span class="string">    pre_order(node.left)</span></span><br><span class="line"><span class="string">    pre_order(node.right)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def in_order(node):</span></span><br><span class="line"><span class="string">    if node is None:</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    in_order(node.left)</span></span><br><span class="line"><span class="string">    print(node.var, end=&#x27; &#x27;)</span></span><br><span class="line"><span class="string">    in_order(node.right)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def post_order(node):</span></span><br><span class="line"><span class="string">    if node is None:</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    post_order(node.left)</span></span><br><span class="line"><span class="string">    post_order(node.right)</span></span><br><span class="line"><span class="string">    print(node.var, end=&#x27; &#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">node1, node2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> node1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> (node1 <span class="keyword">is</span> <span class="literal">None</span>) ^ (node2 <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> solve(node1.left, node2.right):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> solve(node1.right, node2.left):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> node1.var == node2.var:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">lis1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="string">&#x27;null&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;null&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;null&#x27;</span>, <span class="number">11</span>]</span><br><span class="line">lis2 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="string">&#x27;null&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;null&#x27;</span>]</span><br><span class="line">lis3 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">16</span>]</span><br><span class="line">lis0 = <span class="built_in">input</span>().split()</span><br><span class="line"></span><br><span class="line">root1 = Node(lis1[<span class="number">0</span>])</span><br><span class="line">make_tree(lis1, root1)</span><br><span class="line"><span class="built_in">print</span>(solve(root1, root1))</span><br><span class="line"></span><br><span class="line">root2 = Node(lis2[<span class="number">0</span>])</span><br><span class="line">make_tree(lis2, root2)</span><br><span class="line"><span class="built_in">print</span>(solve(root2, root2))</span><br><span class="line"></span><br><span class="line">root3 = Node(lis3[<span class="number">0</span>])</span><br><span class="line">make_tree(lis3, root3)</span><br><span class="line"><span class="built_in">print</span>(solve(root3, root3))</span><br><span class="line"></span><br><span class="line">root0 = Node(lis0[<span class="number">0</span>])</span><br><span class="line">make_tree(lis0, root0)</span><br><span class="line"><span class="built_in">print</span>(solve(root0, root0))</span><br></pre></td></tr></table></figure>
<p>第一题运行结果</p>
<figure>
<img src="/images/截屏2021-10-29%20下午3.39.07.png" alt="第一题运行结果" /><figcaption aria-hidden="true">第一题运行结果</figcaption>
</figure>
<p>第二题代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, var</span>):</span></span><br><span class="line">        self.var = var</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_tree</span>(<span class="params">lis, root</span>):</span></span><br><span class="line">    stack = [root]</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; <span class="built_in">len</span>(lis):</span><br><span class="line">        p = stack.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> lis[k] != <span class="string">&#x27;null&#x27;</span>:</span><br><span class="line">            p.left = Node(lis[k])</span><br><span class="line">            stack.append(p.left)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k &gt;= <span class="built_in">len</span>(lis):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> lis[k] != <span class="string">&#x27;null&#x27;</span>:</span><br><span class="line">            p.right = Node(lis[k])</span><br><span class="line">            stack.append(p.right)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">inf = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">node, fanode</span>):</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> (node.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    solve(node.left, node)</span><br><span class="line">    solve(node.right, node)</span><br><span class="line">    <span class="keyword">if</span> (node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> node.left.var != inf) <span class="keyword">or</span> (node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> node.right.var != inf):</span><br><span class="line">        node.var = inf</span><br><span class="line">        fanode.var = inf</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lis0 = <span class="built_in">input</span>().split()</span><br><span class="line">root = Node(lis0[<span class="number">0</span>])</span><br><span class="line">make_tree(lis0, root)</span><br><span class="line">solve(root, root)</span><br><span class="line"><span class="keyword">if</span> root.var != inf:</span><br><span class="line">    ans += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第二题运行结果</p>
]]></content>
      <categories>
        <category>例子</category>
      </categories>
  </entry>
</search>
